let dynamodb_table_test3 = Resources.dynamodbtabletest3

rule required_values when %dynamodb_table_test3 !empty {
  let key_schema = %dynamodb_table_test3.Properties.KeySchema
  %dynamodb_table_test3.Type == 'AWS::DynamoDB::Table'
  %dynamodb_table_test3.DeletionPolicy == 'Delete'
  %dynamodb_table_test3.UpdateReplacePolicy == 'Delete'
  %key_schema exists
}

rule billingmode_value when %dynamodb_table_test3 !empty {
  %dynamodb_table_test3.Properties.BillingMode == 'PAY_PER_REQUEST'
}

rule pitrs_value when %dynamodb_table_test3 !empty {
  when %dynamodb_table_test3.Properties.PointInTimeRecoverySpecification !empty {
    %dynamodb_table_test3.Properties.PointInTimeRecoverySpecification.PointInTimeRecoveryEnabled is_bool
    %dynamodb_table_test3.Properties.PointInTimeRecoverySpecification.PointInTimeRecoveryEnabled == true
  }
}

rule tableclass_value when %dynamodb_table_test3 !empty {
  when %dynamodb_table_test3.Properties.TableClass !empty {
    %dynamodb_table_test3.Properties.TableClass is_string
    %dynamodb_table_test3.Properties.TableClass == 'STANDARD_INFREQUENT_ACCESS'
  }
}

rule tablename_value when %dynamodb_table_test3 !empty {
  when %dynamodb_table_test3.Properties.TableName !empty {
    %dynamodb_table_test3.Properties.TableName is_string
    %dynamodb_table_test3.Properties.TableName == 'dynamodbtabletest3'
  }
}

rule ttlspec_value when %dynamodb_table_test3 !empty {
  when %dynamodb_table_test3.Properties.TimeToLiveSpecification !empty {
    %dynamodb_table_test3.Properties.TimeToLiveSpecification.AttributeName is_string
    %dynamodb_table_test3.Properties.TimeToLiveSpecification.AttributeName == 'TTLValue'
    %dynamodb_table_test3.Properties.TimeToLiveSpecification.Enabled is_bool
    %dynamodb_table_test3.Properties.TimeToLiveSpecification.Enabled == true
  }
}


rule importsourcespecification_value when %dynamodb_table_test3 !empty {
  when %dynamodb_table_test3.Properties.ImportSourceSpecification !empty {
    %dynamodb_table_test3.Properties.ImportSourceSpecification.InputFormat is_string
    %dynamodb_table_test3.Properties.ImportSourceSpecification.InputFormat == 'ION'
    %dynamodb_table_test3.Properties.ImportSourceSpecification.InputCompressionType is_string
    %dynamodb_table_test3.Properties.ImportSourceSpecification.InputCompressionType == 'GZIP'
    when %dynamodb_table_test3.Properties.ImportSourceSpecification.S3BucketSource !empty {
      %dynamodb_table_test3.Properties.ImportSourceSpecification.S3BucketSource.S3Bucket is_string
      %dynamodb_table_test3.Properties.ImportSourceSpecification.S3BucketSource.S3Bucket !empty
      %dynamodb_table_test3.Properties.ImportSourceSpecification.S3BucketSource.S3KeyPrefix is_string
      %dynamodb_table_test3.Properties.ImportSourceSpecification.S3BucketSource.S3KeyPrefix !empty
    }
  }
}

rule keyschema_values when %dynamodb_table_test3 !empty {
  some %dynamodb_table_test3.Properties.KeySchema[*] {
    AttributeName == 'Album'
    KeyType == 'HASH'
  }
  some %dynamodb_table_test3.Properties.KeySchema[*] {
    AttributeName == 'Artist'
    KeyType == 'RANGE'
  }
}

rule attributedefinitions_values when %dynamodb_table_test3 !empty {
  some %dynamodb_table_test3.Properties.AttributeDefinitions[*] {
    AttributeName == 'Album'
    AttributeType == 'S'
  }
  some %dynamodb_table_test3.Properties.AttributeDefinitions[*] {
    AttributeName == 'Artist'
    AttributeType == 'S'
  }
  some %dynamodb_table_test3.Properties.AttributeDefinitions[*] {
    AttributeName == 'Sales'
    AttributeType == 'N'
  }
  some %dynamodb_table_test3.Properties.AttributeDefinitions[*] {
    AttributeName == 'NumberOfSongs'
    AttributeType == 'N'
  }
}

rule tags_values when %dynamodb_table_test3 !empty {
  some %dynamodb_table_test3.Properties.Tags[*] {
    Key == 'SourceRepoURL'
    Value == 'git@github.com:harisfauzi/shared-sceptre-template.git'
  }
}
