---
name: GitHub Actions Push
on:
  push:
    branches-ignore:
      - main
      - next

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    container:
      image: harisfauzi/hf-sceptre:4.1.0-02
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
        SOURCE_REPO_URL: $GITHUB_REPOSITORY
        SOURCE_REPO_BRANCH: $GITHUB_REF_NAME
      options: --entrypoint sceptre --cpus 1
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v3
      - name: Link templates directory
        run: |
          CURRENT_DIR=$(pwd)
          ln -sf "${CURRENT_DIR}/templates" "${CURRENT_DIR}/test/sceptre/templates"
      - name: Generate CloudFormation templates
        run: |
          cd test/sceptre;
          for CFNTEST_B64 in $(cat unittest.json | jq -r '.cfntests[] | @base64'); do
            CFNTEST=$(echo "${CFNTEST_B64}" | base64 -d)
            _jq() {
              echo "${CFNTEST}" | jq -r "$1"
            }
            YAML_DIR=$(_jq .directory)
            YAML_FILE=$(_jq .file)
            CFN_TEMPLATE=$(_jq .cfntemplate)
            TMP_CFN_TEMPLATE=tmp_${CFN_TEMPLATE}
            /usr/bin/sceptre \
              --var-file ./vars/main.yaml \
              --var aws_region=${AWS_DEFAULT_REGION} \
              generate "${YAML_DIR}/${YAML_FILE}" > cfn-output/"${TMP_CFN_TEMPLATE}"
            # Remove extra YAML (generated by sceptre) if necessary
            # Find the last occurance of '---' marking the beginning of YAML
            YAMLSTART=$(grep -n -E '^\-\-\-' cfn-output/"${TMP_CFN_TEMPLATE}" | tail -n -1| cut -d: -f1)
            if [ "${YAMLSTART}" == "1" ]; then
              # If the last occurance is already at the beginning of the file
              # then treat this is a correct YAML file
              mv cfn-output/"${TMP_CFN_TEMPLATE}" cfn-output/"${CFN_TEMPLATE}"
            else
              # Else, get only the last YAML structure
              tail -n +${YAMLSTART} cfn-output/"${TMP_CFN_TEMPLATE}" > cfn-output/"${CFN_TEMPLATE}"
              rm -f cfn-output/"${TMP_CFN_TEMPLATE}"
            fi
          done
      - name: Check AWS credentials
        run: |
          aws sts get-caller-identity
      - name: Run yamllint
        uses: docker://harisfauzi/hf-sceptre:4.1.0-02
        with:
          entrypoint: /usr/bin/yamllint
          args: test/sceptre/cfn-output/
      - name: Validate CloudFormatoin
        run: |
          cd test/sceptre;
          for CFNTEST_B64 in $(cat unittest.json | jq -r '.cfntests[] | @base64'); do
            CFNTEST=$(echo "${CFNTEST_B64}" | base64 -d)
            _jq() {
              echo "${CFNTEST}" | jq -r "$1"
            }
            YAML_DIR=$(_jq .directory)
            YAML_FILE=$(_jq .file)
            CFN_TEMPLATE=$(_jq .cfntemplate)
            echo "Validating ${CFN_TEMPLATE}"
            # Validate the generated CloudFormation template
            # This must be in us-east-1 as some resources are only available
            # in this region.
            /usr/bin/sceptre \
              --var-file ./vars/main.yaml \
              --var aws_region=us-east-1 \
              validate "${YAML_DIR}/${YAML_FILE}"
          done
      - name: Run cfn-guard against generated CloudFormation templates
        run: |
          cd test/sceptre;
          for CFNTEST_B64 in $(cat unittest.json | jq -r '.cfntests[] | @base64'); do
            CFNTEST=$(echo "${CFNTEST_B64}" | base64 -d)
            _jq() {
              echo "${CFNTEST}" | jq -r "$1"
            }
            YAML_DIR=$(_jq .directory)
            YAML_FILE=$(_jq .file)
            CFN_TEMPLATE=$(_jq .cfntemplate)
            CFNGUARD_RULEDIR=$(_jq .cfnguardruledir)
            echo "cfn-guard ${CFN_TEMPLATE}"
            /usr/bin/cfn-guard \
              validate \
              --rules "${CFNGUARD_RULEDIR}" \
              --data cfn-output/"${CFN_TEMPLATE}" \
              --type CFNTemplate \
              --show-summary all
          done
