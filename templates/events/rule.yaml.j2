---
Description: Events Rule(s) for {{ sceptre_user_data.project_code }}
AWSTemplateFormatVersion: "2010-09-09"

Resources:

{%- for rule in sceptre_user_data.rules %}
{%- set rule_name = rule.name %}
  {{ rule_name }}:
    Type: AWS::Events::Rule
    DeletionPolicy: {{ rule.deletion_policy | default('Delete') }}
    UpdateReplacePolicy: {{ rule.update_replace_policy | default('Delete') }}
    Properties:
      State: {{ rule.state | default('ENABLED') }}
{#- must define either event_pattern on schedule_expression #}
{%- if rule.event_pattern_json is defined %}
      EventPattern: {{ rule.event_pattern_json }}
{%- elif rule.event_pattern is defined %}
{{ rule.event_pattern | indent(width=8, first=true) }}
{%- else %}
      ScheduleExpression: {{ rule.schedule_expression }}
{%- endif %}
{%- if rule.description is defined %}
      Description: {{ rule.description }}
{%- endif %}
{%- if rule.event_bus_name is defined %}
      EventBusName: {{ rule.event_bus_name }}
{%- endif %}
{%- if rule.rule_name is defined %}
      Name: {{ rule.rule_name }}
{%- endif %}
{%- if rule.role_arn is defined %}
      RoleArn: {{ rule.role_arn | trim }}
{%- endif %}
{%- if rule.targets is defined %}
      Targets:
{%- for target in rule.targets %}
        - Arn: {{ target.arn | trim }}
          Id: {{ target.id }}
{%- if target.batch_parameters is defined %}
          BatchParameters:
            JobDefinition: {{ target.batch_parameters.job_definition }}
            JobName: {{ target.batch_parameters.job_name }}
{%- if target.batch_parameters.array_properties is defined %}
            ArrayProperties:
              Size: {{ target.batch_parameters.array_properties.size }}
{%- endif %}
{%- if target.batch_parameters.retry_strategy is defined %}
            RetryStrategy:
              Attempts: {{ target.batch_parameters.retry_strategy.attempts }}
{%- endif %}
{%- endif %}
{%- if target.dead_letter_config is defined %}
          DeadLetterConfig:
            Arn: {{ target.dead_letter_config.arn | trim }}
{%- endif %}
{%- if target.ecs_parameters is defined %}  {# BEGIN {%- if target.ecs_parameters is defined %} #}
          EcsParameters:
            TaskDefinitionArn: {{ target.ecs_parameters.task_definition_arn | trim }}
{%- if target.ecs_parameters.capacity_provider_strategy is defined %}
            CapacityProviderStrategy:
{%- for strategy in target.ecs_parameters.capacity_provider_strategy %}
              - CapacityProvider: {{ strategy.capacity_provider }}
{%- if strategy.base is defined %}
                Base: {{ strategy.base }}
{%- endif %}
{%- if strategy.weight is defined %}
                Weight: {{ strategy.weight }}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- if target.ecs_parameters.enable_ecs_managed_tags is defined %}
            EnableECSManagedTags: {{ target.ecs_parameters.enable_ecs_managed_tags }}
{%- endif %}
{%- if target.ecs_parameters.enable_execute_command is defined %}
            EnableExecuteCommand: {{ target.ecs_parameters.enable_execute_command }}
{%- endif %}
{%- if target.ecs_parameters.group is defined %}
            Group: {{ target.ecs_parameters.group }}
{%- endif %}
{%- if target.ecs_parameters.launch_type is defined %}
            LaunchType: {{ target.ecs_parameters.launch_type }}
{%- endif %}
{%- if target.ecs_parameters.network_configuration is defined %}
            NetworkConfiguration:
              AwsVpcConfiguration:
                Subnets:
{%- for subnet in target.ecs_parameters.network_configuration.aws_vpc_configuration.subnets %}
                  - {{ subnet | trim }}
{%- endfor %}
{%- if target.ecs_parameters.network_configuration.aws_vpc_configuration.assign_public_ip is defined %}
                AssignPublicIp: {{ target.ecs_parameters.network_configuration.aws_vpc_configuration.assign_public_ip }}
{%- endif %}
{%- if target.ecs_parameters.network_configuration.aws_vpc_configuration.security_groups is defined %}
                SecurityGroups:
{%- for security_group in target.ecs_parameters.network_configuration.aws_vpc_configuration.security_groups %}
                  - {{ security_group | trim }}
{%- endfor %}
{%- endif %}
{%- endif %}
{%- if target.ecs_parameters.placement_constraints is defined %}
            PlacementConstraints:
{%- for placement_constraint in target.ecs_parameters.placement_constraints %}
              -
{%- if placement_constraint.expression is defined %}
                Expression: {{ placement_constraint.expression }}
{%- endif %}
{%- if placement_constraint.type is defined %}
                Type: {{ placement_constraint.type }}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- if target.ecs_parameters.placement_strategies is defined %}
            PlacementStrategies:
{%- for placement_strategy in target.ecs_parameters.placement_strategies %}
              -
{%- if placement_strategy.field is defined %}
                Field: {{ placement_strategy.field }}
{%- endif %}
{%- if placement_strategy.type is defined %}
                Type: {{ placement_strategy.type }}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- if target.ecs_parameters.platform_version is defined %}
            PlatformVersion: {{ target.ecs_parameters.platform_version }}
{%- endif %}
{%- if target.ecs_parameters.propagate_tags is defined %}
            PropagateTags: {{ target.ecs_parameters.propagate_tags }}
{%- endif %}
{%- if target.ecs_parameters.reference_id is defined %}
            ReferenceId: {{ target.ecs_parameters.reference_id }}
{%- endif %}
{%- if target.ecs_parameters.tag_list is defined %}
            TagList:
{%- for key, value in target.ecs_parameters.tag_list.items() %}
              - Key: "{{ key }}"
                Value: "{{ value }}"
{%- endfor %}
{%- endif %}
{%- if target.ecs_parameters.task_count is defined %}
            TaskCount: {{ target.ecs_parameters.task_count }}
{%- endif %}
{%- endif %}  {# END {%- if target.ecs_parameters is defined %} #}
{%- if target.http_parameters is defined %}
          HttpParameters:
{%- if target.http_parameters.header_parameters is defined %}
            HeaderParameters:
{%- for key, value in target.http_parameters.header_parameters.items() %}
              "{{ key }}" : "{{ value }}"
{%- endfor %}
{%- endif %}
{%- if target.http_parameters.path_parameter_values is defined %}
            PathParameterValues:
{%- for value in target.http_parameters.path_parameter_values %}
              - {{ value }}
{%- endfor %}
{%- endif %}
{%- if target.http_parameters.query_string_parameters is defined %}
            QueryStringParameters:
{%- for key, value in target.http_parameters.query_string_parameters.items() %}
              "{{ key }}" : "{{ value }}"
{%- endfor %}
{%- endif %}
{%- endif %}
{%- if target.input is defined %}
          Input: {{ target.input }}
{%- endif %}
{%- if target.input_path is defined %}
          InputPath: {{ target.input_path }}
{%- endif %}
{%- if target.input_transformer is defined %}
          InputTransformer:
            InputTemplate: {{ target.input_transformer.input_template }}
            InputPathsMap:
{%- for key, value in target.input_transformer.input_paths_map.items() %}
              "{{ key }}" : "{{ value }}"
{%- endfor %}
{%- endif %}
{%- if target.kinesis_parameters is defined %}
          KinesisParameters:
            PartitionKeyPath: {{ target.kinesis_parameters.partition_key_path }}
{%- endif %}
{%- if target.redshift_data_parameters is defined %}
          RedshiftDataParameters:
            Database: {{ target.redshift_data_parameters.database | trim }}
            Sql: {{ target.redshift_data_parameters.sql }}
{%- if target.redshift_data_parameters.db_user is defined %}
            DbUser: {{ target.redshift_data_parameters.db_user }}
{%- endif %}
{%- if target.redshift_data_parameters.secret_manager_arn is defined %}
            SecretManagerArn: {{ target.redshift_data_parameters.secret_manager_arn | trim }}
{%- endif %}
{%- if target.redshift_data_parameters.statement_name is defined %}
            StatementName: {{ target.redshift_data_parameters.statement_name }}
{%- endif %}
{%- if target.redshift_data_parameters.with_event is defined %}
            WithEvent: {{ target.redshift_data_parameters.with_event }}
{%- endif %}
{%- endif %}
{%- if target.retry_policy is defined %}
          RetryPolicy:
{%- if target.retry_policy.maximum_event_age_in_seconds is defined %}
            MaximumEventAgeInSeconds: {{ target.retry_policy.maximum_event_age_in_seconds }}
{%- endif %}
{%- if target.retry_policy.maximum_retry_attempts is defined %}
            MaximumRetryAttempts: {{ target.retry_policy.maximum_retry_attempts }}
{%- endif %}
{%- endif %}
{%- if target.role_arn is defined %}
          RoleArn: {{ target.role_arn | trim }}
{%- endif %}
{%- if target.run_command_parameters is defined %}
          RunCommandParameters:
            RunCommandTargets:
{%- for run_command_target in target.run_command_parameters.run_command_targets %}
              - Key: {{ run_command_target.key }}
                Values:
{%- for values in run_command_target.values %}
                  - {{ values }}
{%- endfor %}
{%- endfor %}
{%- endif %}
{%- if target.sqs_parameters is defined %}
          SqsParameters:
            MessageGroupId: {{ target.sqs_parameters.message_group_id | trim }}
{%- endif %}
{%- endfor %}
{%- endif %}

{%- endfor %}

Outputs:

{%- for rule in sceptre_user_data.rules %}
{%- set rule_name = rule.name %}
  {{ rule_name }}:
    Description: Rule ID for rule {{ rule_name }}
    Value:
      Ref: {{ rule_name }}
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ rule_name }}"

  {{ rule_name }}Arn:
    Description: The ARN for rule {{ rule_name }}
    Value:
      Fn::GetAtt:
        - {{ rule_name }}
        - Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ rule_name }}-Arn"

{%- endfor %}