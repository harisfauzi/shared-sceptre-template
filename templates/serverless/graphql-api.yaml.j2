---
{%- import 'macros/prop-graphqlapi.yaml.j2' as prop_graphqlapi %}
Description: {{sceptre_user_data.description|default('Serverless GraphQLApi(s) for '+sceptre_user_data.project_code)}}
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Resources:
{%- for graphqlapi in sceptre_user_data.graphqlapis %}
{%- set graphqlapi_name = graphqlapi.name %}
  {{ graphqlapi_name }}:
    Type: AWS::Serverless::GraphQLApi
    DeletionPolicy: {{ graphqlapi.deletion_policy | default('Delete') }}
    UpdateReplacePolicy: {{ graphqlapi.update_replace_policy | default('Delete') }}
    Properties:
      {#- BEGIN Auth: #}
      Auth:
        Type: {{ graphqlapi.auth.type }}
{%- if graphqlapi.auth.additional is defined %}{#- BEGIN if graphqlapi.auth.additional is defined #}
        Additional:
{%- for additional_item in graphqlapi.auth.additional %}
          - Type: {{ additional_item.type }}
{%- if additional_item.lambda_authorizer is defined %}{## BEGIN if additional_item.lambda_authorizer is defined #}
            {{ prop_graphqlapi.prep_lambda_authorizer_config(additional_item.lambda_authorizer) | indent(width=14, first=false) }}
{%- endif %}{## END if additional_item.lambda_authorizer is defined #}
{%- if additional_item.open_id_connect is defined %}{## BEGIN if additional_item.open_id_connect is defined #}
            {{ prop_graphqlapi.prep_openid_connect_config(additional_item.open_id_connect) | indent(width=12, first=false) }}
{%- endif %}{## END if additional_item.open_id_connect is defined #}
{%- if additional_item.user_pool is defined %}{## BEGIN if additional_item.user_pool is defined #}
            {{ prop_graphqlapi.prep_user_pool(additional_item.user_pool) | indent(width=12, first=false) }}
{%- endif %}{## END if additional_item.user_pool is defined #}
{%- endfor %}
{%- endif %}{#- END if graphqlapi.auth.additional is defined #}
{%- if graphqlapi.auth.lambda_authorizer is defined %}
        {{ prop_graphqlapi.prep_lambda_authorizer_config(graphqlapi.auth.lambda_authorizer) | indent(width=10, first=false) }}
{%- endif %}
{%- if graphqlapi.auth.open_id_connect is defined %}
        {{ prop_graphqlapi.prep_openid_connect_config(graphqlapi.auth.open_id_connect) | indent(width=8, first=false) }}
{%- endif %}
{%- if graphqlapi.auth.user_pool is defined %}
        {{ prop_graphqlapi.prep_user_pool(graphqlapi.auth.user_pool) | indent(width=8, first=false) }}
{%- endif %}
      {#- END Auth: #}
      {#- BEGIN DataSources: #}
      DataSources:
{%- if graphqlapi.data_sources.dynamo_db is defined %}{# BEGIN if graphqlapi.data_sources.dynamo_db is defined #}
        DynamoDb:
{%- for logical_id, dynamo_db in graphqlapi.data_sources.dynamo_db.items() %}
          {{ logical_id }}:
            TableName: {{ dynamo_db.table_name }}
{%- if dynamo_db.delta_sync is defined %}{# BEGIN if dynamo_db.delta_sync is defined #}
            DeltaSync:
              BaseTableTTL: {{ dynamo_db.delta_sync.base_table_ttl }}
              DeltaSyncTableName: {{ dynamo_db.delta_sync.delta_sync_table_name }}
              DeltaSyncTableTTL: {{ dynamo_db.delta_sync.delta_sync_table_ttl }}
{%- endif %}{# END if dynamo_db.delta_sync is defined #}
{%- if dynamo_db.description is defined %}
            Description: {{ dynamo_db.description }}
{%- endif %}
{%- if dynamo_db.name is defined %}
            Name: {{ dynamo_db.name }}
{%- endif %}
{%- if dynamo_db.permissions is defined %}
            Permissions: {{ dynamo_db.permissions }}
{%- endif %}
{%- if dynamo_db.region is defined %}
            Region: {{ dynamo_db.region }}
{%- endif %}
{%- if dynamo_db.service_role_arn is defined %}
            ServiceRoleArn: {{ dynamo_db.service_role_arn }}
{%- endif %}
{%- if dynamo_db.table_arn is defined %}
            TableArn: {{ dynamo_db.table_arn }}
{%- endif %}
{%- if dynamo_db.use_caller_credentials is defined %}
            UseCallerCredentials: {{ dynamo_db.use_caller_credentials | lower }}
{%- endif %}
{%- if dynamo_db.versioned is defined %}
            Versioned: {{ dynamo_db.versioned | lower }}
{%- endif %}
{%- endfor %}
{%- endif %}{# END if graphqlapi.data_sources.dynamo_db is defined #}
{%- if graphqlapi.data_sources.lambda is defined %}{# BEGIN if graphqlapi.data_sources.dynamo_db is defined #}
        Lambda:
{%- for logical_id, lambda in graphqlapi.data_sources.lambda.items() %}
          {{ logical_id }}:
{%- if lambda.description is defined %}
            Description: {{ lambda.description }}
{%- endif %}
{%- if lambda.function_arn is defined %}
            FunctionArn: {{ lambda.function_arn }}
{%- endif %}
{%- if lambda.name is defined %}
            Name: {{ lambda.name }}
{%- endif %}
{%- if lambda.service_role_arn is defined %}
            ServiceRoleArn: {{ lambda.service_role_arn }}
{%- endif %}
{%- endfor %}
{%- endif %}{# END if graphqlapi.data_sources.dynamo_db is defined #}
      {#- END DataSources: #}
      {#- BEGIN Functions: #}
      Functions:
{%- for logical_id, function in graphqlapi.functions.items() %}
        {{ logical_id }}:
          DataSource: {{ function.data_source }}
          Runtime:
            Name: {{ function.runtime.name }}
            Version: {{ function.runtime.version }}
{%- if function.code_uri is defined %}
          CodeUri: {{ function.code_uri }}
{%- endif %}
{%- if function.description is defined %}
          Description: {{ function.description }}
{%- endif %}
{%- if function.id is defined %}
          Id: {{ function.id }}
{%- endif %}
{%- if function.inline_code is defined %}
          InlineCode: |
            {{ function.inline_code | indent(width=12, first=false) }}
{%- endif %}
{%- if function.max_batch_size is defined %}
          MaxBatchSize: {{ function.max_batch_size }}
{%- endif %}
{%- if function.name is defined %}
          Name: {{ function.name }}
{%- endif %}
{%- if function.sync is defined %}{# BEGIN if function.sync is defined#}
          Sync:
            ConflictDetection: {{ function.sync.conflict_detection }}
{%- if function.sync.conflict_handler is defined %}
            ConflictHandler: {{ function.sync.conflict_handler }}
{%- endif %}
{%- if function.sync.lambda_conflict_handler_config is defined %}
            LambdaConflictHandlerConfig:
{%- if function.sync.lambda_conflict_handler_config.lambda_conflict_handler_arn is defined %}
              LambdaConflictHandlerArn: {{ function.sync.lambda_conflict_handler_config.lambda_conflict_handler_arn }}
{%- endif %}
{%- endif %}
{%- endif %}{# END if function.sync is defined #}
{%- endfor %}
      {#- END Functions: #}
      {#- BEGIN Resolvers: #}
      Resolvers:
{%- for operation_type, operation in graphqlapi.resolvers.items() %}{# BEGIN for operation_type, operation in graphqlapi.resolvers.items() #}
        {{ operation_type }}:
{%- for logical_id, resolver in operation.items() %}{## BEGIN for logical_id, resolver in operation.items() #}
          {{ logical_id }}:
            Pipeline:
{%- for item in resolver.pipeline %}
              - {{ item }}
{%- endfor %}
            Runtime:
              Name: {{ resolver.runtime.name }}
              Version: {{ resolver.runtime.version }}
{%- if resolver.caching is defined %}{### BEGIN if resolver.caching is defined #}
            Caching:
              Ttl: {{ resolver.caching.ttl }}
{%- if resolver.caching.caching_keys is defined %}
              CachingKeys:
{%- for item in resolver.caching.caching_keys %}
                - {{ item }}
{%- endfor %}
{%- endif %}
{%- endif %}{### END if resolver.caching is defined #}
{%- if resolver.code_uri is defined %}
            CodeUri: {{ resolver.code_uri }}
{%- endif %}
{%- if resolver.field_name is defined %}
            FieldName: {{ resolver.field_name }}
{%- endif %}
{%- if resolver.inline_code is defined %}
            InlineCode: {{ resolver.inline_code }}
{%- endif %}
{%- if resolver.max_batch_size is defined %}
            MaxBatchSize: {{ resolver.max_batch_size }}
{%- endif %}
{%- if resolver.sync is defined %}{### BEGIN if resolver.sync is defined #}
            Sync:
              ConflictDetection: {{ resolver.sync.conflict_detection }}
{%- if resolver.sync.conflict_handler is defined %}
              ConflictHandler: {{ resolver.sync.conflict_handler }}
{%- endif %}
{%- if resolver.sync.lambda_conflict_handler_config is defined %}{# BEGIN if resolver.sync.lambda_conflict_handler_config is defined #}
              LambdaConflictHandlerConfig:
{%- if resolver.sync.lambda_conflict_handler_config.lambda_conflict_handler_arn is defined %}
                LambdaConflictHandlerArn: {{ resolver.sync.lambda_conflict_handler_config.lambda_conflict_handler_arn }}
{%- endif %}
{%- endif %}{# END if resolver.sync.lambda_conflict_handler_config is defined #}
{%- endif %}{### END if resolver.sync is defined #}
{%- endfor %}{## END for logical_id, resolver in operation.items() #}
{%- endfor %}{# BEGIN for operation_type, operation in graphqlapi.resolvers.items() #}
      {#- END Resolvers: #}
{%- if graphqlapi.api_keys is defined %}{# BEGIN if graphqlapi.api_keys is defined #}
      ApiKeys:
{%- for logical_id, api_key in graphqlapi.api_keys.items() %}{# BEGIN for logical_id, api_key in graphqlapi.api_keys.items() #}
        {{ logical_id }}:
          ApiKeyId: {{ api_key.api_key_id }}
          ExpiresOn: {{ api_key.expires_on }}
{%- if api_key.description is defined %}
          Description: {{ api_key.description }}
{%- endif %}
{%- endfor %}{# END for logical_id, api_key in graphqlapi.api_keys.items() #}
{%- endif %}{# END if graphqlapi.api_keys is defined #}
{%- if graphqlapi.cache is defined %}{# BEGIN if graphqlapi.cache is defined #}
      Cache:
{%- if graphqlapi.cache.api_caching_behavior is defined %}
        ApiCachingBehavior: {{ graphqlapi.cache.api_caching_behavior }}
{%- endif %}
{%- if graphqlapi.cache.api_id is defined %}
        ApiId: {{ graphqlapi.cache.api_id | trim }}
{%- endif %}
{%- if graphqlapi.cache.at_rest_encryption_enabled is defined %}
        AtRestEncryptionEnabled: {{ graphqlapi.cache.at_rest_encryption_enabled | lower }}
{%- endif %}
{%- if graphqlapi.cache.health_metrics_config is defined %}
        HealthMetricsConfig: {{ graphqlapi.cache.health_metrics_config }}
{%- endif %}
{%- if graphqlapi.cache.transit_encryption_enabled is defined %}
        TransitEncryptionEnabled: {{ graphqlapi.cache.transit_encryption_enabled | lower }}
{%- endif %}
{%- if graphqlapi.cache.ttl is defined %}
        Ttl: {{ graphqlapi.cache.ttl }}
{%- endif %}
{%- if graphqlapi.cache.type is defined %}
        Type: {{ graphqlapi.cache.type }}
{%- endif %}
{%- endif %}{# END if graphqlapi.cache is defined #}
{%- if graphqlapi.domain_name is defined %}{# BEGIN if graphqlapi.domain_name is defined #}
      DomainName:
        CertificateArn: {{ graphqlapi.domain_name.certificate_arn | trim }}
        DomainName: {{ graphqlapi.domain_name.domain_name }}
{%- if graphqlapi.domain_name.description is defined %}
        Description: {{ graphqlapi.domain_name.description }}
{%- endif %}
        Tags: 
          - Key: SourceRepoURL
            Value: {{ sceptre_user_data.source_repo_url | default('unknown') }}
{%- if graphqlapi.domain_name.tags is defined %}
{%- for key, value in graphqlapi.domain_name.tags.items() %}
          - Key: {{ key }}
            Value: {{ value }}
{%- endfor %}
{%- endif %}
{%- endif %}{# END if graphqlapi.domain_name is defined #}
{%- if graphqlapi.logging is defined %}{# BEGIN if graphqlapi.logging is defined #}
      Logging:
{%- if graphqlapi.logging.cloud_watch_logs_role_arn is defined %}
        CloudWatchLogsRoleArn: {{ graphqlapi.logging.cloud_watch_logs_role_arn | trim }}
{%- endif %}
{%- if graphqlapi.logging.exclude_verbose_content is defined %}
        ExcludeVerboseContent: {{ graphqlapi.logging.exclude_verbose_content | lower }}
{%- endif %}
{%- if graphqlapi.logging.field_log_level is defined %}
        FieldLogLevel: {{ graphqlapi.logging.field_log_level }}
{%- endif %}
{%- endif %}{# END if graphqlapi.logging is defined #}
{%- if graphqlapi.graphqlapi_name is defined %}
      Name: {{ graphqlapi.graphqlapi_name }}
{%- endif %}
{%- if graphqlapi.schema_inline is defined %}
      SchemaInline: {{ graphqlapi.schema_inline }}
{%- endif %}
{%- if graphqlapi.schema_uri is defined %}
      SchemaUri: {{ graphqlapi.schema_uri }}
{%- endif %}
      Tags:
        - Key: SourceRepoURL
          Value: {{ sceptre_user_data.source_repo_url | default('unknown') }}
{%- if graphqlapi.tags is defined %}
{%- for key, value in graphqlapi.tags.items() %}
        - Key: {{ key }}
          Value: {{ value }}
{%- endfor %}
{%- endif %}
{%- if graphqlapi.xray_enabled is defined %}
      XrayEnabled: {{ graphqlapi.xray_enabled | lower }}
{%- endif %}
{%- endfor %}

Outputs:
{%- for graphqlapi in sceptre_user_data.graphqlapis %}
{%- set graphqlapi_name = graphqlapi.name %}
  {{ graphqlapi_name }}:
    Description: The ARN of GraphQLAPI for {{ graphqlapi_name }}
    Value:
      Ref: {{ graphqlapi_name }}
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ graphqlapi_name }}"

  {{ graphqlapi_name }}ApiId:
    Description: Unique AWS AppSync GraphQL API identifier for {{ graphqlapi_name }}
    Value:
      Fn::GetAtt:
        - {{ graphqlapi_name }}
        - ApiId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ graphqlapi_name }}-ApiId"

  {{ graphqlapi_name }}GraphQLDns:
    Description: The FQDN of the endpoint URL for {{ graphqlapi_name }}
    Value:
      Fn::GetAtt:
        - {{ graphqlapi_name }}
        - GraphQLDns
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ graphqlapi_name }}-GraphQLDns"

  {{ graphqlapi_name }}GraphQLEndpointArn:
    Description: The GraphQL endpoint ARN for {{ graphqlapi_name }}
    Value:
      Fn::GetAtt:
        - {{ graphqlapi_name }}
        - GraphQLEndpointArn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ graphqlapi_name }}-GraphQLEndpointArn"

  {{ graphqlapi_name }}GraphQLUrl:
    Description: The Endpoint URL of the GraphQL API for {{ graphqlapi_name }}
    Value:
      Fn::GetAtt:
        - {{ graphqlapi_name }}
        - GraphQLUrl
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ graphqlapi_name }}-GraphQLUrl"

  {{ graphqlapi_name }}RealtimeDns:
    Description: The FQDN of the real-time endpoint URL of the GraphQL API for {{ graphqlapi_name }}
    Value:
      Fn::GetAtt:
        - {{ graphqlapi_name }}
        - RealtimeDns
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ graphqlapi_name }}-RealtimeDns"

  {{ graphqlapi_name }}RealtimeUrl:
    Description: The GraphQL API real-time endpoint URL for {{ graphqlapi_name }}
    Value:
      Fn::GetAtt:
        - {{ graphqlapi_name }}
        - RealtimeUrl
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-{{ graphqlapi_name }}-RealtimeUrl"
{%- endfor %}
{#
# Supported structure as of 20250322:
  Type: AWS::Serverless::GraphQLApi
  Properties:
    ApiKeys:
      LogicalId:
        ApiKeyId: String
        Description: String
        ExpiresOn: Double
    Auth:
      Additional:
        -
          LambdaAuthorizer:
            AuthorizerResultTtlInSeconds: Integer
            AuthorizerUri: String
            IdentityValidationExpression: String
          OpenIDConnect:
            AuthTTL: Number
            ClientId: String
            IatTTL: Number
            Issuer: String
          Type: String
          UserPool:
            AppIdClientRegex: String
            AwsRegion: String
            DefaultAction: String
            UserPoolId: String
      LambdaAuthorizer:
        AuthorizerResultTtlInSeconds: Integer
        AuthorizerUri: String
        IdentityValidationExpression: String
      OpenIDConnect:
        AuthTTL: Number
        ClientId: String
        IatTTL: Number
        Issuer: String
      Type: String
      UserPool:
        AppIdClientRegex: String
        AwsRegion: String
        DefaultAction: String
        UserPoolId: String

    Cache: AWS::AppSync::ApiCache
    DataSources:
      DynamoDb:
        LogicalId:
          DeltaSync:
            BaseTableTTL: String
            DeltaSyncTableName: String
            DeltaSyncTableTTL: String
          Description: String
          Name: String
          Permissions: List
          Region: String
          ServiceRoleArn: String
          TableArn: String
          TableName: String
          UseCallerCredentials: Boolean
          Versioned: Boolean
      Lambda:
        LogicalId:
          Description: String
          FunctionArn: String
          Name: String
          ServiceRoleArn: String
    DomainName: AWS::AppSync::DomainName
    Functions:
      LogicalId:
        CodeUri: String
        DataSource: String
        Description: String
        Id: String
        InlineCode: String
        MaxBatchSize: Integer
        Name: String
        Runtime:
          Name: String
          Version: String
        Sync:
          ConflictDetection: String
          ConflictHandler: String
          LambdaConflictHandlerConfig:
            LambdaConflictHandlerArn: String
    Logging:
      CloudWatchLogsRoleArn: String
      ExcludeVerboseContent: Boolean
      FieldLogLevel: String
    Name: String
    Resolvers:
      OperationType:
        LogicalId:
          Caching:
            CachingKeys:
              - String
            Ttl: Number

          CodeUri: String
          FieldName: String
          InlineCode: String
          MaxBatchSize: Integer
          Pipeline: List
          Runtime:
            Name: String
            Version: String
          Sync:
            ConflictDetection: String
            ConflictHandler: String
            LambdaConflictHandlerConfig:
              LambdaConflictHandlerArn: String
    SchemaInline: String
    SchemaUri: String
    Tags:
      - Key: String
        Value: String
    XrayEnabled: Boolean
#}